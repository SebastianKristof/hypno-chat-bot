import os
from typing import Dict, Any, Optional

from crewai import Agent
from langchain.chat_models import ChatOpenAI
import yaml

from hypnobot.utils.logging import get_logger

logger = get_logger(__name__)

class QAAgent:
    """QA/Safety agent for the hypnotherapy chatbot.
    
    This agent is responsible for reviewing content generated by the
    client-facing agent, ensuring it adheres to safety guidelines,
    stays within appropriate scope, and follows ethical standards.
    """
    
    def __init__(self, config_path: Optional[str] = None):
        """Initialize the QA agent.
        
        Args:
            config_path: Path to the agent configuration file.
                If None, uses the default config path.
        """
        self.config_path = config_path or os.path.join(
            os.path.dirname(__file__), "..", "config", "agents.yaml"
        )
        self.config = self._load_config()
        self.agent = self._create_agent()
    
    def _load_config(self) -> Dict[str, Any]:
        """Load the agent configuration from YAML."""
        try:
            with open(self.config_path, "r") as file:
                config = yaml.safe_load(file)
                return config.get("qa_agent", {})
        except Exception as e:
            logger.error(f"Error loading QA agent config: {e}")
            # Return a default configuration if loading fails
            return {
                "role": "Hypnotherapy QA Specialist",
                "goal": "Review content for safety and ethical standards",
                "backstory": "You ensure all content meets professional standards.",
                "verbose": True,
                "llm": {"model": "gpt-4", "temperature": 0.3},
            }
    
    def _create_agent(self) -> Agent:
        """Create the CrewAI agent with the loaded configuration."""
        # Get API key from environment variable
        openai_api_key = os.environ.get("OPENAI_API_KEY")
        if not openai_api_key:
            logger.warning("OPENAI_API_KEY not found in environment variables")
        
        # Configure the LLM
        llm_config = self.config.get("llm", {})
        llm = ChatOpenAI(
            model=llm_config.get("model", "gpt-4"),
            temperature=llm_config.get("temperature", 0.3),
            api_key=openai_api_key,
        )
        
        # Create the agent
        return Agent(
            role=self.config.get("role", "Hypnotherapy QA Specialist"),
            goal=self.config.get("goal", "Review content for safety and ethical standards"),
            backstory=self.config.get("backstory", "You ensure all content meets professional standards."),
            verbose=self.config.get("verbose", True),
            allow_delegation=self.config.get("allow_delegation", False),
            llm=llm,
        )
    
    def get_agent(self) -> Agent:
        """Get the configured CrewAI agent instance."""
        return self.agent 